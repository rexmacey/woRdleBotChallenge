oldpkg <- read.csv("oldpkg.csv")
for (i in 1:nrow(oldpkg)) {
print(oldpkg[i, "Package"])
try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
}
oldpkg <- old.packages()
library(devtools)
library(fundAnalysis)
downloadMonthlyReturns("IVV")
library(lubridate)
downloadMonthlyReturns("IVV")
View(downloadMonthlyReturns)
symbol <- "IVV"
fromDate <- "1970-12-31"
toDate = Sys.Date()
cname <- make.names(symbol)
if (day(toDate) > 1) {
toDate <- make_date(year(toDate), month(toDate), 1)
}
out <- symbol %>% tq_get(get = "stock.prices", from = fromDate,
to = toDate)
library(dplyr)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("pkgconfig", dependencies = TRUE)
library(dplyr)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("tidyselect", dependencies = TRUE)
library(dplyr)
symbol <- "IVV"
fromDate <- "1970-12-31"
toDate = Sys.Date()
cname <- make.names(symbol)
if (day(toDate) > 1) {
toDate <- make_date(year(toDate), month(toDate), 1)
}
out <- symbol %>% tq_get(get = "stock.prices", from = fromDate,
to = toDate)
??tq_get
library(tidyquant)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("PerformanceAnalytics", dependencies = TRUE)
library(tidyquant)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("quadprog", dependencies = TRUE)
library(tidyquant)
install.packages("httr", dependencies = TRUE)
library(tidyquant)
install.packages("jsonlite", dependencies = TRUE)
library(tidyquant)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("gtable", dependencies = TRUE)
library(tidyquant)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("scales", dependencies = TRUE)
library(tidyquant)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("munsell", dependencies = TRUE)
library(tidyquant)
library(dplyr)
symbol <- "IVV"
fromDate <- "1970-12-31"
toDate = Sys.Date()
cname <- make.names(symbol)
if (day(toDate) > 1) {
toDate <- make_date(year(toDate), month(toDate), 1)
}
out <- symbol %>% tq_get(get = "stock.prices", from = fromDate,
to = toDate)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("timeDate", dependencies = TRUE)
library(tidyquant)
library(dplyr)
out <- symbol %>% tq_get(get = "stock.prices", from = fromDate,
to = toDate)
install.packages("gower", dependencies = TRUE)
library(tidyquant)
library(dplyr)
symbol <- "IVV"
fromDate <- "1970-12-31"
toDate = Sys.Date()
cname <- make.names(symbol)
if (day(toDate) > 1) {
toDate <- make_date(year(toDate), month(toDate), 1)
}
out <- symbol %>% tq_get(get = "stock.prices", from = fromDate,
to = toDate)
# oldpkg <- old.packages()
# oldpkg <- read.csv("oldpkg.csv")
# for (i in 1:nrow(oldpkg)) {
#   print(oldpkg[i, "Package"])
#   try(install.packages(oldpkg[i, "Package"], dependencies = oldpkg[i, "depend"]))
# }
install.packages("prodlim", dependencies = TRUE)
library(tidyquant)
library(dplyr)
out <- symbol %>% tq_get(get = "stock.prices", from = fromDate,
to = toDate)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
shiny::runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
runApp('G:/My Drive/Personal Files/Documents/AA/FinSim/FInSim')
sample.int(2,10)
sample.int(2,10, replace = TRUE)
sample.int(10,2, replace = TRUE)
sample.int(10,2, replace = TRUE)
sample.int(10,2, replace = TRUE)
nPersons <- 1000
trueAnswer <- 1000
errorQty <- 500
nTrials <- 3000
set.seed(101)
makeGuesses <- function(nGuesses, trueAnswer, errorQty) {
((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer
}
mean(makeGuesses(1000, 1000, 500))
mean(makeGuesses(1000, 1000, 500))
summary(makeGuesses(1000, 1000, 500)
)
rm(makeGuesses())
rm(makeGuesses
)
runTrial <- function(nGuesses, trueAnswer, errorQty) {
mean(((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer)
}
runTrials(1000, 1000, 500)
runTrial(1000, 1000, 500)
runTrial(1000, 1000, 500)
runTrial(1000, 1000, 500)
runTrial(1000, 1000, 500)
runTrial(1000, 1000, 500)
runTrial(nPersons, trueAnswer, errorQty)
runTrial <- function(nGuesses, trueAnswer, errorQty) {
mean(((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer)
}
runTrial(nPersons, trueAnswer, errorQty)
?rep
test <- rep(runTrial(nPersons, trueAnswer, errorQty), 10)
test <- replicate(10, runTrial(nPersons, trueAnswer, errorQty))
test <- replicate(10, runTrial(nPersons, trueAnswer, errorQty))
summarize(test)
summary(test)
nPersons <- 5000
trueAnswer <- 1000
errorQty <- 500
nTrials <- 1000
set.seed(101)
runTrial <- function(nGuesses, trueAnswer, errorQty) {
mean(((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer)
}
test <- replicate(10, runTrial(nPersons, trueAnswer, errorQty))
summary(test)
hist(test)
test <- replicate(nTrials, runTrial(nPersons, trueAnswer, errorQty))
summary(test)
hist(test)
nPersons <- 5000
trueAnswer <- 100
errorQty <- trueAnswer - 50
nTrials <- 1000
set.seed(101)
runTrial <- function(nGuesses, trueAnswer, errorQty) {
mean(((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer)
}
test <- replicate(nTrials, runTrial(nPersons, trueAnswer, errorQty))
summary(test)
hist(test)
nPersons <- 5000
trueAnswer <- 100
errorQty <- trueAnswer
nTrials <- 1000
set.seed(101)
runTrial <- function(nGuesses, trueAnswer, errorQty) {
mean(((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer)
}
test <- replicate(nTrials, runTrial(nPersons, trueAnswer, errorQty))
summary(test)
hist(test)
temp <- runTrial(5000, 100, 100)
nPersons <- 1000
trueAnswer <- 100
errorQty <- trueAnswer
nTrials <- 1000
set.seed(101)
runTrial <- function(nGuesses, trueAnswer, errorQty) {
mean(((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer)
}
test <- replicate(nTrials, runTrial(nPersons, trueAnswer, errorQty))
summary(test)
hist(test)
runTrial <- function(nGuesses, trueAnswer, errorQty) {
mean(((sample.int(2 * errorQty + 1, nGuesses, replace = TRUE) - 1) - errorQty) + trueAnswer)
}
test <- replicate(nTrials, runTrial(nPersons, trueAnswer, errorQty))
summary(test)
hist(test, main = "Crowd-Sourced Answer", xlab = "Crowd's 'Guess'")
cLow <- 1
sample.int(cHigh, 10, replace = TRUE)
sample.int(199, 10, replace = TRUE)
mean(sample.int(199, 10, replace = TRUE))
?replicate
crowdSimulate <- function(sizeOfCrowd, nSim = 1000){
replicate(nSim, mean(sample.int(199, sizeOfCrowd, replace = TRUE)))
}
summary(crowdSimulate())
summary(crowdSimulate(2))
cLow <- 1
cHigh <- 199
crowdSimulate <- function(sizeOfCrowd, nSim = 1000){
summary(replicate(nSim, mean(sample.int(199, sizeOfCrowd, replace = TRUE))))
}
test <- crowdSimulate(2)
test
test["Median"]
2:5:2
?seq
crowdSizes <- seq.int(100, 3000, 10)
test <- sapply(crowdSizes, crowdSimulate)
test <- t(test)
head(test)
library(dplyr)
library(dplyr)
library(ggplot)
library(ggplot2)
head(test)
df <- data.frame(CrowdSize = crowdSizes,
Low25Pct = test["1st Qu."],
Mean = test["Mean"],
High25Pct = test["3rd Qu."])
head(df)
df <- data.frame(CrowdSize = crowdSizes,
Low25Pct = test[, 2],
Mean = test[, 4],
High25Pct = test[, 5])
head(df)
ggplot(data = df, aes(x = CrowdSize, y = mean)) + geom_line(col = "blue")
ggplot(data = df, aes(x = CrowdSize, y = mean)) + geom_line()
library(woRdleBotChallenge)
library(devtools)
library(woRdleBotChallenge)
data("wordList") #loads the wordList
print(paste("# of words in the list is ", length(wordList)))
validWordsVector <- toupper(wordList[1:10])
validWordsVector
stupidBot1 <- function(wordleEvaluatorResult = NULL, validWordList) {
if(is.null(wordleEvaluatorResult$response)) return("ABACA")
guesses <- c("AARON", "ABACK", "AARGH", "ABADA", "AAHED", "AALII")
return(guesses[length(wordleEvaluatorResult$response)])
}
print("Wordle puzzle 1 with the word 'AARGH'")
wordleEvaluator(stupidBot1, "AARGH", validWordsVector)
print("Wordle puzzle 2 with the word 'ABACA'")
wordleEvaluator(stupidBot1, "ABACA", validWordsVector)
print("Wordle puzzle 3 with the word 'ABAFT' which is not in the bot's list")
wordleEvaluator(stupidBot1, "ABAFT", validWordsVector)
stupidBot2 <- function(wordleEvaluatorResult = NULL, validWordList) {
if(is.null(wordleEvaluatorResult$response)) return("AARGH")
guesses <- c("ABADA", "ABACK", "ABACI", "AAHED", "AALII", "AARON")
return(guesses[length(wordleEvaluatorResult$response)])
}
nWordsInChallenge <- 3
set.seed(Sys.Date())
challengeWords <- sample(validWordsVector, nWordsInChallenge, replace = FALSE)
test1 <- sapply(challengeWords, function(x) wordleEvaluator(stupidBot1, x, wordList)$score)
test2 <- sapply(challengeWords, function(x) wordleEvaluator(stupidBot2, x, wordList)$score)
test1
test2
print(paste("Average of stupidBot1's scores =", mean(test1)))
print(paste("Average of stupidBot2's scores =", mean(test2)))
if(mean(test1) == mean(test2)){
print("It's a tie!")
} else if (mean(test1) < mean(test2)) {
print("stupidBot1 wins!")
} else {
print("stupidBot2 wins!")
}
wordleEvaluator(botList[1], challengeWords[1], wordList)
botList <- c(stupidBot1, stupidBot2)
wordleEvaluator(botList[1], challengeWords[1], wordList)
botList
wordleEvaluator(botList[[1]], challengeWords[1], wordList)
names(botList)
botList <- c(stupidBot1 = stupidBot1, stupidBot2 = stupidBot2)
names(botList)
wordleEvaluator(botList[[1]], challengeWords[1], wordList)
botList <- c(stupidBot1, stupidBot2)
if(is.null(names(botList))) names(botList) <- paste0("bot", 1:length(botList))
names(botList)
nBots <- length(botList)
challengeWords
Scores <- matrix(0, ncol = nBots, nrow = length(challengeWords))
Scores <- data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords)))
Scores <- matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(challengeWords, names(botList)))
scores
Scores <- matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(challengeWords, names(botList)))
Scores
out <- data.frame(rep(list(botName = character(),
AverageScore = numeric(),
Scores = numeric()), nBots))
Scores
Scores <- matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList)))
Scores <- matrix(0, ncol = nBots, nrow = length(challengeWords),
Scores
Scores <- data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))
Scores
Scores <- rbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList)))))
Scores
Scores <- cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList)))))
Scores <- cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
Scores
out <- list(averageScores = data.frame(botName = character(nBots),
AverageScore = numeric(nBots)),
Scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
out
out <- list(averageScores = data.frame(botName = character(nBots),
AverageScore = numeric(nBots)),
scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
out <- list(averageScores = data.frame(botName = names(botList),
AverageScore = numeric(nBots)),
scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
out
for(i in 1:nBots){
out$scores[, i + 1] <- sapply(challengeWords, function(x) wordleEvaluator(botList[[i]], x, wordList)$score)
out$averageScores[i, 2] <- mean(out$scores[, i + 1])
}
out
integer(3)
out$averageScores <- out$averageScores %>% mutate(Rank = rank(averageScore, ties.method = "average") )
library(dplyr)
o
out$averageScores <- out$averageScores %>% mutate(Rank = rank(averageScore, ties.method = "average") )
out <- list(averageScores = data.frame(botName = names(botList),
AverageScore = numeric(nBots)),
scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
for(i in 1:nBots){
out$scores[, i + 1] <- sapply(challengeWords, function(x) wordleEvaluator(botList[[i]], x, wordList)$score)
out$averageScores[i, 2] <- mean(out$scores[, i + 1])
}
out$averageScores <- out$averageScores %>% mutate(Rank = rank(averageScore, ties.method = "average") )
out
out$averageScores <- out$averageScores %>% mutate(Rank = rank(AverageScore, ties.method = "average") )
out
which.min(out$averageScores$Rank)
out$winner <- paste("Winner is", out$averageScores$botName[winningIdx], "with an average score of", out$averageScores$AverageScore[winningIdx])
winningIdx <- which.min(out$averageScores$Rank)
out$winner <- paste("Winner is", out$averageScores$botName[winningIdx], "with an average score of", out$averageScores$AverageScore[winningIdx])
out$winner
botList1 <- c(stupidBot1 = stupidBot1, stupidBot2 = stupidBot2)
botList2 <- c(stupidBot1, stupidBot2)
wordleChallenge <- function(botList, challengeWords, i, wordList, AverageScore) {
nBots <- length(botList)
if(is.null(names(botList))) names(botList) <- paste0("bot", 1:nBots)
out <- list(averageScores = data.frame(botName = names(botList),
AverageScore = numeric(nBots)),
scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
for(i in 1:nBots){
out$scores[, i + 1] <- sapply(challengeWords, function(x) wordleEvaluator(botList[[i]], x, wordList)$score)
out$averageScores[i, 2] <- mean(out$scores[, i + 1])
}
out$averageScores <- out$averageScores %>% mutate(Rank = rank(AverageScore, ties.method = "average"))
winningIdx <- which.min(out$averageScores$Rank)
out$winner <- paste("Winner is", out$averageScores$botName[winningIdx], "with an average score of", out$averageScores$AverageScore[winningIdx])
return(out)
}
wordleChallenge <- function(botList, challengeWords, i, wordList) {
nBots <- length(botList)
if(is.null(names(botList))) names(botList) <- paste0("bot", 1:nBots)
out <- list(averageScores = data.frame(botName = names(botList),
AverageScore = numeric(nBots)),
scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
for(i in 1:nBots){
out$scores[, i + 1] <- sapply(challengeWords, function(x) wordleEvaluator(botList[[i]], x, wordList)$score)
out$averageScores[i, 2] <- mean(out$scores[, i + 1])
}
out$averageScores <- out$averageScores %>% mutate(Rank = rank(AverageScore, ties.method = "average"))
winningIdx <- which.min(out$averageScores$Rank)
out$winner <- paste("Winner is", out$averageScores$botName[winningIdx], "with an average score of", out$averageScores$AverageScore[winningIdx])
return(out)
}
wordleChallenge(botList1, challengeWords, wordList)$averageScores
data("wordList") #loads the wordList
print(paste("# of words in the list is ", length(wordList)))
validWordsVector <- toupper(wordList[1:10])
validWordsVector
wordleChallenge(botList1, challengeWords, wordList)$averageScores
wordleChallenge <- function(botList, challengeWords, i, wordList) {
nBots <- length(botList)
if(is.null(names(botList))) names(botList) <- paste0("bot", 1:nBots)
out <- list(averageScores = data.frame(botName = names(botList),
AverageScore = numeric(nBots)),
scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
for(i in 1:nBots){
out$scores[, i + 1] <- sapply(challengeWords, function(x) wordleEvaluator(botList[[i]], x, wordList)$score)
out$averageScores[i, 2] <- mean(out$scores[, i + 1])
}
out$averageScores <- out$averageScores %>% mutate(Rank = rank(AverageScore, ties.method = "average"))
winningIdx <- which.min(out$averageScores$Rank)
out$winner <- paste("Winner is", out$averageScores$botName[winningIdx], "with an average score of", out$averageScores$AverageScore[winningIdx])
return(out)
}
wordleChallenge(botList1, challengeWords, wordList)$averageScores
head(wordList)
head(wordList)
wordleChallenge(botList1, challengeWords, wordList)$averageScores
wordleChallenge <- function(botList, challengeWords, wordList) {
nBots <- length(botList)
if(is.null(names(botList))) names(botList) <- paste0("bot", 1:nBots)
out <- list(averageScores = data.frame(botName = names(botList),
AverageScore = numeric(nBots)),
scores = cbind(challengeWords, data.frame(matrix(0, ncol = nBots, nrow = length(challengeWords),
dimnames = list(NULL, names(botList))))))
for(i in 1:nBots){
out$scores[, i + 1] <- sapply(challengeWords, function(x) wordleEvaluator(botList[[i]], x, wordList)$score)
out$averageScores[i, 2] <- mean(out$scores[, i + 1])
}
out$averageScores <- out$averageScores %>% mutate(Rank = rank(AverageScore, ties.method = "average"))
winningIdx <- which.min(out$averageScores$Rank)
out$winner <- paste("Winner is", out$averageScores$botName[winningIdx], "with an average score of", out$averageScores$AverageScore[winningIdx])
return(out)
}
wordleChallenge(botList1, challengeWords, wordList)$averageScores
wordleChallenge(botList2, challengeWords, wordList)$averageScores
wordleChallengeResults <- wordleChallenge(botList1, challengeWords, wordList)
wordleChallengeResults$averageScores
wordleChallengeResults$winner
wordleChallengeResults
library(devtools)
devtools::check()
getwd()
setwd("G:/My Drive/Personal Files/Documents/R/woRdleBotChallenge")
devtools::check()
devtools::check()
devtools::build()
devtools::build_vignettes()
devtools::install()
